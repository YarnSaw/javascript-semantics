<objs> ( _ =>
        <obj>
            <oid>
                @ArrayOid
            </oid>
            <properties>
                "isArray" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 66 )
                    "Writable" |-> true )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ArrayProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @ArrayProtoOid
            </oid>
            <properties>
                "concat" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 72 )
                    "Writable" |-> true )
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ArrayOid
                    "Writable" |-> true )
                "every" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 96 )
                    "Writable" |-> true )
                "filter" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 104 )
                    "Writable" |-> true )
                "forEach" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 100 )
                    "Writable" |-> true )
                "indexOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 92 )
                    "Writable" |-> true )
                "join" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 74 )
                    "Writable" |-> true )
                "lastIndexOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 94 )
                    "Writable" |-> true )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> true )
                "map" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 102 )
                    "Writable" |-> true )
                "pop" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 76 )
                    "Writable" |-> true )
                "push" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 78 )
                    "Writable" |-> true )
                "reduce" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 106 )
                    "Writable" |-> true )
                "reduceRight" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 108 )
                    "Writable" |-> true )
                "reverse" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 80 )
                    "Writable" |-> true )
                "shift" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 82 )
                    "Writable" |-> true )
                "slice" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 84 )
                    "Writable" |-> true )
                "some" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 98 )
                    "Writable" |-> true )
                "sort" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 86 )
                    "Writable" |-> true )
                "splice" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 88 )
                    "Writable" |-> true )
                "toLocaleString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 70 )
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 68 )
                    "Writable" |-> true )
                "unshift" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 90 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Array"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @BooleanOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @BooleanProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @BooleanProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @BooleanOid
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 150 )
                    "Writable" |-> true )
                "valueOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 152 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Boolean"
                "Extensible" |-> true
                "PrimitiveValue" |-> false
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @DateOid
            </oid>
            <properties>
                "UTC" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.UTC" )
                    "Writable" |-> true )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 7
                    "Writable" |-> false )
                "now" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.now" )
                    "Writable" |-> true )
                "parse" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.parse" )
                    "Writable" |-> true )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @DateProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @DateProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @DateOid
                    "Writable" |-> true )
                "getDate" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getDate" )
                    "Writable" |-> true )
                "getDay" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getDay" )
                    "Writable" |-> true )
                "getFullYear" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getFullYear" )
                    "Writable" |-> true )
                "getHours" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getHours" )
                    "Writable" |-> true )
                "getMilliseconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getMilliseconds" )
                    "Writable" |-> true )
                "getMinutes" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getMinutes" )
                    "Writable" |-> true )
                "getMonth" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getMonth" )
                    "Writable" |-> true )
                "getSeconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getSeconds" )
                    "Writable" |-> true )
                "getTime" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getTime" )
                    "Writable" |-> true )
                "getTimezoneOffset" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getTimezoneOffset" )
                    "Writable" |-> true )
                "getUTCDate" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCDate" )
                    "Writable" |-> true )
                "getUTCDay" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCDay" )
                    "Writable" |-> true )
                "getUTCFullYear" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCFullYear" )
                    "Writable" |-> true )
                "getUTCHours" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCHours" )
                    "Writable" |-> true )
                "getUTCMilliseconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCMilliseconds" )
                    "Writable" |-> true )
                "getUTCMinutes" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCMinutes" )
                    "Writable" |-> true )
                "getUTCMonth" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCMonth" )
                    "Writable" |-> true )
                "getUTCSeconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.getUTCSeconds" )
                    "Writable" |-> true )
                "setDate" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setDate" )
                    "Writable" |-> true )
                "setFullYear" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setFullYear" )
                    "Writable" |-> true )
                "setHours" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setHours" )
                    "Writable" |-> true )
                "setMilliseconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setMilliseconds" )
                    "Writable" |-> true )
                "setMinutes" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setMinutes" )
                    "Writable" |-> true )
                "setMonth" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setMonth" )
                    "Writable" |-> true )
                "setSeconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setSeconds" )
                    "Writable" |-> true )
                "setTime" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setTime" )
                    "Writable" |-> true )
                "setUTCDate" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setUTCDate" )
                    "Writable" |-> true )
                "setUTCFullYear" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setUTCFullYear" )
                    "Writable" |-> true )
                "setUTCHours" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setUTCHours" )
                    "Writable" |-> true )
                "setUTCMilliseconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setUTCMilliseconds" )
                    "Writable" |-> true )
                "setUTCMinutes" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setUTCMinutes" )
                    "Writable" |-> true )
                "setUTCMonth" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setUTCMonth" )
                    "Writable" |-> true )
                "setUTCSeconds" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.setUTCSeconds" )
                    "Writable" |-> true )
                "toDateString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toDateString" )
                    "Writable" |-> true )
                "toISOString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toISOString" )
                    "Writable" |-> true )
                "toJSON" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toJSON" )
                    "Writable" |-> true )
                "toLocaleDateString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toLocaleDateString" )
                    "Writable" |-> true )
                "toLocaleString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toLocaleString" )
                    "Writable" |-> true )
                "toLocaleTimeString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toLocaleTimeString" )
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 202 )
                    "Writable" |-> true )
                "toTimeString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toTimeString" )
                    "Writable" |-> true )
                "toUTCString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Date.prototype.toUTCString" )
                    "Writable" |-> true )
                "valueOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 204 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Date"
                "Extensible" |-> true
                "PrimitiveValue" |-> @NaN
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @ErrorOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ErrorProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @ErrorProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ErrorOid
                    "Writable" |-> true )
                "message" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> true )
                "name" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> "Error"
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 208 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Error"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @EvalErrorOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @EvalErrorProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @EvalErrorProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @EvalErrorOid
                    "Writable" |-> true )
                "message" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> true )
                "name" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> "EvalError"
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Error"
                "Extensible" |-> true
                "Prototype" |-> @ErrorProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @FunctionOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @FunctionProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @FunctionProtoOid
            </oid>
            <properties>
                "apply" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 60 )
                    "Writable" |-> true )
                "bind" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 64 )
                    "Writable" |-> true )
                "call" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 62 )
                    "Writable" |-> true )
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @FunctionOid
                    "Writable" |-> true )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 58 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @GlobalOid
            </oid>
            <properties>
                "Array" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ArrayOid
                    "Writable" |-> true )
                "Boolean" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @BooleanOid
                    "Writable" |-> true )
                "Char2Int" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Char2Int" )
                    "Writable" |-> false )
                "CharAt" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "CharAt" )
                    "Writable" |-> false )
                "CheckObjectCoercible" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "CheckObjectCoercible" )
                    "Writable" |-> false )
                "CurrentTimeMillis" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "CurrentTimeMillis" )
                    "Writable" |-> false )
                "Date" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @DateOid
                    "Writable" |-> true )
                "DatePrototypeToString" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "DatePrototypeToString" )
                    "Writable" |-> false )
                "DefineOwnProperty" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "DefineOwnProperty" )
                    "Writable" |-> false )
                "Error" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ErrorOid
                    "Writable" |-> true )
                "EvalError" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @EvalErrorOid
                    "Writable" |-> true )
                "FindString" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "FindString" )
                    "Writable" |-> false )
                "FromPropertyDescriptor" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "FromPropertyDescriptor" )
                    "Writable" |-> false )
                "Function" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @FunctionOid
                    "Writable" |-> true )
                "FunctionPrototypeApply" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "FunctionPrototypeApply" )
                    "Writable" |-> false )
                "FunctionPrototypeBind" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "FunctionPrototypeBind" )
                    "Writable" |-> false )
                "FunctionPrototypeToString" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "FunctionPrototypeToString" )
                    "Writable" |-> false )
                "GetInternalProperty" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "GetInternalProperty" )
                    "Writable" |-> false )
                "GetOwnProperty" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "GetOwnProperty" )
                    "Writable" |-> false )
                "Infinity" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @+Infinity
                    "Writable" |-> false )
                "Int2Char" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Int2Char" )
                    "Writable" |-> false )
                "IsCallable" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "IsCallable" )
                    "Writable" |-> false )
                "IsFunction" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "IsFunction" )
                    "Writable" |-> false )
                "IsNaN" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "IsNaN" )
                    "Writable" |-> false )
                "IsNegativeZero" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "IsNegativeZero" )
                    "Writable" |-> false )
                "IsObject" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "IsObject" )
                    "Writable" |-> false )
                "IsPositiveZero" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "IsPositiveZero" )
                    "Writable" |-> false )
                "JSON" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @JSONOid
                    "Writable" |-> true )
                "LengthString" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "LengthString" )
                    "Writable" |-> false )
                "Math" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @MathOid
                    "Writable" |-> true )
                "MathFloor" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "MathFloor" )
                    "Writable" |-> false )
                "MathPow" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "MathPow" )
                    "Writable" |-> false )
                "MathSin" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "MathSin" )
                    "Writable" |-> false )
                "NaN" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @NaN
                    "Writable" |-> false )
                "NoConstructor" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "NoConstructor" )
                    "Writable" |-> false )
                "Number" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @NumberOid
                    "Writable" |-> true )
                "NumberPrototypeToFixed" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "NumberPrototypeToFixed" )
                    "Writable" |-> false )
                "NumberToString" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "NumberToString" )
                    "Writable" |-> false )
                "Object" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ObjectOid
                    "Writable" |-> true )
                "ObjectGetOwnPropertyNames" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ObjectGetOwnPropertyNames" )
                    "Writable" |-> false )
                "Print" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Print" )
                    "Writable" |-> false )
                "RangeError" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @RangeErrorOid
                    "Writable" |-> true )
                "ReferenceError" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ReferenceErrorOid
                    "Writable" |-> true )
                "RegExp" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @RegExpOid
                    "Writable" |-> true )
                "SetInternalProperty" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "SetInternalProperty" )
                    "Writable" |-> false )
                "String" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @StringOid
                    "Writable" |-> true )
                "SubstrString" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "SubstrString" )
                    "Writable" |-> false )
                "SyntaxError" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @SyntaxErrorOid
                    "Writable" |-> true )
                "ToInteger" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ToInteger" )
                    "Writable" |-> false )
                "ToNumber" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ToNumber" )
                    "Writable" |-> false )
                "ToObject" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ToObject" )
                    "Writable" |-> false )
                "ToPropertyDescriptor" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ToPropertyDescriptor" )
                    "Writable" |-> false )
                "ToString" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ToString" )
                    "Writable" |-> false )
                "ToUint16" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ToUint16" )
                    "Writable" |-> false )
                "ToUint32" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "ToUint32" )
                    "Writable" |-> false )
                "Trim" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ ( "Trim" )
                    "Writable" |-> false )
                "TypeError" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @TypeErrorOid
                    "Writable" |-> true )
                "URIError" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @URIErrorOid
                    "Writable" |-> true )
                "console" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> true
                    "Value" |-> @oo ( 1 )
                    "Writable" |-> true )
                "decodeURI" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 12 )
                    "Writable" |-> true )
                "decodeURIComponent" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 14 )
                    "Writable" |-> true )
                "encodeURI" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 16 )
                    "Writable" |-> true )
                "encodeURIComponent" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 18 )
                    "Writable" |-> true )
                "eval" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "eval_i" )
                    "Writable" |-> true )
                "isFinite" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 10 )
                    "Writable" |-> true )
                "isNaN" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 8 )
                    "Writable" |-> true )
                "parseFloat" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 6 )
                    "Writable" |-> true )
                "parseInt" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 4 )
                    "Writable" |-> true )
                "undefined" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> Undefined
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Object"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @JSONOid
            </oid>
            <properties>
                "parse" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "parse" )
                    "Writable" |-> true )
                "stringify" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "stringify" )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "JSON"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @MathOid
            </oid>
            <properties>
                "E" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2.7182818284590451e+00
                    "Writable" |-> false )
                "LN2" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 6.9314718055994529e-01
                    "Writable" |-> false )
                "LN10" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2.3025850929940459e+00
                    "Writable" |-> false )
                "LOG2E" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1.4426950408889634e+00
                    "Writable" |-> false )
                "LOG10E" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 4.3429448190325182e-01
                    "Writable" |-> false )
                "PI" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 3.1415926535897931e+00
                    "Writable" |-> false )
                "SQRT1_2" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 7.0710678118654757e-01
                    "Writable" |-> false )
                "SQRT2" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1.4142135623730951e+00
                    "Writable" |-> false )
                "abs" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 166 )
                    "Writable" |-> true )
                "acos" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 168 )
                    "Writable" |-> true )
                "asin" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 170 )
                    "Writable" |-> true )
                "atan2" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 174 )
                    "Writable" |-> true )
                "atan" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 172 )
                    "Writable" |-> true )
                "ceil" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 176 )
                    "Writable" |-> true )
                "cos" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 178 )
                    "Writable" |-> true )
                "exp" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 180 )
                    "Writable" |-> true )
                "floor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 182 )
                    "Writable" |-> true )
                "log" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 184 )
                    "Writable" |-> true )
                "max" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 186 )
                    "Writable" |-> true )
                "min" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 188 )
                    "Writable" |-> true )
                "pow" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 190 )
                    "Writable" |-> true )
                "random" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 192 )
                    "Writable" |-> true )
                "round" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 194 )
                    "Writable" |-> true )
                "sin" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 196 )
                    "Writable" |-> true )
                "sqrt" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 198 )
                    "Writable" |-> true )
                "tan" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 200 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Math"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @NumberOid
            </oid>
            <properties>
                "MAX_VALUE" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1.7976931348623157e+308
                    "Writable" |-> false )
                "MIN_VALUE" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 4.9406564584124654e-324
                    "Writable" |-> false )
                "NEGATIVE_INFINITY" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @-Infinity
                    "Writable" |-> false )
                "NaN" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @NaN
                    "Writable" |-> false )
                "POSITIVE_INFINITY" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @+Infinity
                    "Writable" |-> false )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @NumberProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @NumberProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @NumberOid
                    "Writable" |-> true )
                "toExponential" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 162 )
                    "Writable" |-> true )
                "toFixed" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 160 )
                    "Writable" |-> true )
                "toLocaleString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 156 )
                    "Writable" |-> true )
                "toPrecision" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 164 )
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 154 )
                    "Writable" |-> true )
                "valueOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 158 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Number"
                "Extensible" |-> true
                "PrimitiveValue" |-> 0
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @ObjectOid
            </oid>
            <properties>
                "create" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 26 )
                    "Writable" |-> true )
                "defineProperties" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 30 )
                    "Writable" |-> true )
                "defineProperty" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 28 )
                    "Writable" |-> true )
                "freeze" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 34 )
                    "Writable" |-> true )
                "getOwnPropertyDescriptor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 22 )
                    "Writable" |-> true )
                "getOwnPropertyNames" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 24 )
                    "Writable" |-> true )
                "getPrototypeOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 20 )
                    "Writable" |-> true )
                "isExtensible" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 42 )
                    "Writable" |-> true )
                "isFrozen" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 40 )
                    "Writable" |-> true )
                "isSealed" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 38 )
                    "Writable" |-> true )
                "keys" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 44 )
                    "Writable" |-> true )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "preventExtensions" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 36 )
                    "Writable" |-> true )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ObjectProtoOid
                    "Writable" |-> false )
                "seal" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 32 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @ObjectProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ObjectOid
                    "Writable" |-> true )
                "hasOwnProperty" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 52 )
                    "Writable" |-> true )
                "isPrototypeOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 54 )
                    "Writable" |-> true )
                "propertyIsEnumerable" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 56 )
                    "Writable" |-> true )
                "toLocaleString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 48 )
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 46 )
                    "Writable" |-> true )
                "valueOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 50 )
                    "Writable" |-> true )
                ?P |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> true
                    "Value" |-> ?V
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Object"
                "Extensible" |-> true
                "Prototype" |-> @NullOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @RangeErrorOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @RangeErrorProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @RangeErrorProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @RangeErrorOid
                    "Writable" |-> true )
                "message" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> true )
                "name" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> "RangeError"
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Error"
                "Extensible" |-> true
                "Prototype" |-> @ErrorProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @ReferenceErrorOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @ReferenceErrorProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @ReferenceErrorProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ReferenceErrorOid
                    "Writable" |-> true )
                "message" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> true )
                "name" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> "ReferenceError"
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Error"
                "Extensible" |-> true
                "Prototype" |-> @ErrorProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @RegExpOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @RegExpProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @RegExpProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @RegExpOid
                    "Writable" |-> true )
                "exec" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 206 )
                    "Writable" |-> true )
                "global" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> false
                    "Writable" |-> false )
                "ignoreCase" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> false
                    "Writable" |-> false )
                "lastIndex" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> true )
                "multiline" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> false
                    "Writable" |-> false )
                "source" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> false )
                "test" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "RegExp.prototype.test" )
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @ ( "RegExp.prototype.toString" )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "RegExp"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @StringOid
            </oid>
            <properties>
                "fromCharCode" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 110 )
                    "Writable" |-> true )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @StringProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @StringProtoOid
            </oid>
            <properties>
                "charAt" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 116 )
                    "Writable" |-> true )
                "charCodeAt" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 118 )
                    "Writable" |-> true )
                "concat" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 120 )
                    "Writable" |-> true )
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @StringOid
                    "Writable" |-> true )
                "indexOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 122 )
                    "Writable" |-> true )
                "lastIndexOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 124 )
                    "Writable" |-> true )
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
                "localeCompare" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 126 )
                    "Writable" |-> true )
                "match" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 128 )
                    "Writable" |-> true )
                "replace" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 130 )
                    "Writable" |-> true )
                "search" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 132 )
                    "Writable" |-> true )
                "slice" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 134 )
                    "Writable" |-> true )
                "split" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 136 )
                    "Writable" |-> true )
                "substring" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 138 )
                    "Writable" |-> true )
                "toLocaleLowerCase" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 142 )
                    "Writable" |-> true )
                "toLocaleUpperCase" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 146 )
                    "Writable" |-> true )
                "toLowerCase" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 140 )
                    "Writable" |-> true )
                "toString" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 112 )
                    "Writable" |-> true )
                "toUpperCase" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 144 )
                    "Writable" |-> true )
                "trim" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 148 )
                    "Writable" |-> true )
                "valueOf" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 114 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "String"
                "Extensible" |-> true
                "PrimitiveValue" |-> ""
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @SyntaxErrorOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @SyntaxErrorProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @SyntaxErrorProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @SyntaxErrorOid
                    "Writable" |-> true )
                "message" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> true )
                "name" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> "SyntaxError"
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Error"
                "Extensible" |-> true
                "Prototype" |-> @ErrorProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @TypeErrorOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @TypeErrorProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @TypeErrorProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @TypeErrorOid
                    "Writable" |-> true )
                "message" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> true )
                "name" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> "TypeError"
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Error"
                "Extensible" |-> true
                "Prototype" |-> @ErrorProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @URIErrorOid
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @URIErrorProtoOid
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Extensible" |-> true
                "Prototype" |-> @FunctionProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @URIErrorProtoOid
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @URIErrorOid
                    "Writable" |-> true )
                "message" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> ""
                    "Writable" |-> true )
                "name" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> "URIError"
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Error"
                "Extensible" |-> true
                "Prototype" |-> @ErrorProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 1 )
            </oid>
            <properties>
                "log" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> true
                    "Value" |-> @oo ( 2 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Object"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 2 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
                "prototype" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 3 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %exp ( %call ( %var ( "Print" ) , %cons ( %call ( 
                  %var ( "ToString" ) , %cons ( %var ( "v" ) , %nil ) ) , %nil
                   ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "v" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 3 )
            </oid>
            <properties>
                "constructor" |-> @desc ( 
                    "Configurable" |-> true
                    "Enumerable" |-> false
                    "Value" |-> @oo ( 2 )
                    "Writable" |-> true )
            </properties>
            <internalProperties>
                "Class" |-> "Object"
                "Extensible" |-> true
                "Prototype" |-> @ObjectProtoOid
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 4 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: parseInt" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "string" ) , %cons ( 
                  %var ( "radix" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 6 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: parseFloat" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "string" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 8 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %call ( %var ( "IsNaN" ) , %cons ( %call 
                  ( %var ( "ToNumber" ) , %cons ( %var ( "number" ) , %nil ) )
                   , %nil ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "number" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 10 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "n" ) , %exp ( %bop ( 
                  %assign , %var ( "n" ) , %call ( %var ( "ToNumber" ) , %cons
                   ( %var ( "number" ) , %nil ) ) ) ) ) , %return ( %pre ( 
                  %bang , %bop ( %or , %bop ( %or , %call ( %var ( "IsNaN" ) ,
                   %cons ( %var ( "n" ) , %nil ) ) , %bop ( %eqs , %var ( "n" 
                  ) , %pre ( %plus , %var ( "Infinity" ) ) ) ) , %bop ( %eqs ,
                   %var ( "n" ) , %pre ( %minus , %var ( "Infinity" ) ) ) ) ) 
                  ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "number" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 12 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: decodeURI" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "encodedURI" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 14 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: decodeURIComponent" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "encodedURIComponent" ) 
                  , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 16 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: encodeURI" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "uri" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 18 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: encodeURIComponent" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "uriComponent" ) , %nil 
                  )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 20 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.getPrototypeOf" ) , %nil ) ) ) , 
                  %emptyStmt ) , %return ( %call ( %var ( 
                  "GetInternalProperty" ) , %cons ( %var ( "O" ) , %cons ( 
                  %con ( "Prototype" ) , %nil ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 22 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.getOwnPropertyDescriptor" ) , 
                  %nil ) ) ) , %emptyStmt ) , %return ( %call ( %var ( 
                  "FromPropertyDescriptor" ) , %cons ( %call ( %var ( 
                  "GetOwnProperty" ) , %cons ( %var ( "O" ) , %cons ( %call ( 
                  %var ( "ToString" ) , %cons ( %var ( "P" ) , %nil ) ) , %nil
                   ) ) ) , %nil ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %cons ( %var ( 
                  "P" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 24 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.getOwnPropertyNames" ) , %nil ) )
                   ) , %emptyStmt ) , %return ( %call ( %var ( 
                  "ObjectGetOwnPropertyNames" ) , %cons ( %var ( "O" ) , %nil 
                  ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 26 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %bop ( %or , %call ( 
                  %var ( "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) , %bop
                   ( %eqs , %var ( "O" ) , %con ( %null ) ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.create" ) , %nil ) ) ) , 
                  %emptyStmt ) , %seq ( %seq ( %vdecl ( "obj" ) , %exp ( %bop 
                  ( %assign , %var ( "obj" ) , %new ( %var ( "Object" ) , %nil
                   ) ) ) ) , %seq ( %exp ( %call ( %var ( 
                  "SetInternalProperty" ) , %cons ( %var ( "obj" ) , %cons ( 
                  %con ( "Prototype" ) , %cons ( %var ( "O" ) , %nil ) ) ) ) )
                   , %seq ( %if ( %bop ( %neqs , %var ( "Properties" ) , %var 
                  ( "undefined" ) ) , %exp ( %call ( %mem ( %var ( "Object" ) 
                  , %con ( "defineProperties" ) ) , %cons ( %var ( "obj" ) , 
                  %cons ( %var ( "Properties" ) , %nil ) ) ) ) , %emptyStmt ) 
                  , %return ( %var ( "obj" ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %cons ( %var ( 
                  "Properties" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 28 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 3
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.defineProperty" ) , %nil ) ) ) , 
                  %emptyStmt ) , %seq ( %exp ( %call ( %var ( 
                  "DefineOwnProperty" ) , %cons ( %var ( "O" ) , %cons ( %call
                   ( %var ( "ToString" ) , %cons ( %var ( "P" ) , %nil ) ) , 
                  %cons ( %call ( %var ( "ToPropertyDescriptor" ) , %cons ( 
                  %var ( "Attributes" ) , %nil ) ) , %cons ( %con ( true ) , 
                  %nil ) ) ) ) ) ) , %return ( %var ( "O" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %cons ( %var ( 
                  "P" ) , %cons ( %var ( "Attributes" ) , %nil ) ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 30 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.defineProperties" ) , %nil ) ) ) 
                  , %emptyStmt ) , %seq ( %label ( "" , %forin ( %vdecl ( 
                  "name" ) , %var ( "name" ) , %var ( "Properties" ) , %if ( 
                  %call ( %mem ( %var ( "Properties" ) , %con ( 
                  "hasOwnProperty" ) ) , %cons ( %var ( "name" ) , %nil ) ) , 
                  %exp ( %call ( %mem ( %var ( "Object" ) , %con ( 
                  "defineProperty" ) ) , %cons ( %var ( "O" ) , %cons ( %var (
                   "name" ) , %cons ( %mem ( %var ( "Properties" ) , %var ( 
                  "name" ) ) , %nil ) ) ) ) ) , %emptyStmt ) ) ) , %return ( 
                  %var ( "O" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %cons ( %var ( 
                  "Properties" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 32 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.seal" ) , %nil ) ) ) , %emptyStmt
                   ) , %seq ( %seq ( %vdecl ( "names" ) , %exp ( %bop ( 
                  %assign , %var ( "names" ) , %call ( %mem ( %var ( "Object" 
                  ) , %con ( "getOwnPropertyNames" ) ) , %cons ( %var ( "O" ) 
                  , %nil ) ) ) ) ) , %seq ( %label ( "" , %for ( %seq ( %vdecl
                   ( "i" ) , %exp ( %bop ( %assign , %var ( "i" ) , %con ( 0 )
                   ) ) ) , %bop ( %lt , %var ( "i" ) , %mem ( %var ( "names" )
                   , %con ( "length" ) ) ) , %pre ( %inc , %var ( "i" ) ) , 
                  %seq ( %seq ( %vdecl ( "desc" ) , %exp ( %bop ( %assign , 
                  %var ( "desc" ) , %call ( %mem ( %var ( "Object" ) , %con ( 
                  "getOwnPropertyDescriptor" ) ) , %cons ( %var ( "O" ) , 
                  %cons ( %mem ( %var ( "names" ) , %var ( "i" ) ) , %nil ) ) 
                  ) ) ) ) , %seq ( %exp ( %bop ( %assign , %mem ( %var ( 
                  "desc" ) , %con ( "configurable" ) ) , %con ( false ) ) ) , 
                  %exp ( %call ( %mem ( %var ( "Object" ) , %con ( 
                  "defineProperty" ) ) , %cons ( %var ( "O" ) , %cons ( %mem (
                   %var ( "names" ) , %var ( "i" ) ) , %cons ( %var ( "desc" )
                   , %nil ) ) ) ) ) ) ) ) ) , %seq ( %exp ( %call ( %var ( 
                  "SetInternalProperty" ) , %cons ( %var ( "O" ) , %cons ( 
                  %con ( "Extensible" ) , %cons ( %con ( false ) , %nil ) ) ) 
                  ) ) , %return ( %var ( "O" ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 34 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.freeze" ) , %nil ) ) ) , 
                  %emptyStmt ) , %seq ( %seq ( %vdecl ( "names" ) , %exp ( 
                  %bop ( %assign , %var ( "names" ) , %call ( %mem ( %var ( 
                  "Object" ) , %con ( "getOwnPropertyNames" ) ) , %cons ( %var
                   ( "O" ) , %nil ) ) ) ) ) , %seq ( %label ( "" , %for ( %seq
                   ( %vdecl ( "i" ) , %exp ( %bop ( %assign , %var ( "i" ) , 
                  %con ( 0 ) ) ) ) , %bop ( %lt , %var ( "i" ) , %mem ( %var (
                   "names" ) , %con ( "length" ) ) ) , %pre ( %inc , %var ( 
                  "i" ) ) , %seq ( %seq ( %vdecl ( "desc" ) , %exp ( %bop ( 
                  %assign , %var ( "desc" ) , %call ( %mem ( %var ( "Object" )
                   , %con ( "getOwnPropertyDescriptor" ) ) , %cons ( %var ( 
                  "O" ) , %cons ( %mem ( %var ( "names" ) , %var ( "i" ) ) , 
                  %nil ) ) ) ) ) ) , %seq ( %if ( %bop ( %or , %call ( %mem ( 
                  %var ( "desc" ) , %con ( "hasOwnProperty" ) ) , %cons ( %con
                   ( "value" ) , %nil ) ) , %call ( %mem ( %var ( "desc" ) , 
                  %con ( "hasOwnProperty" ) ) , %cons ( %con ( "writable" ) , 
                  %nil ) ) ) , %exp ( %bop ( %assign , %mem ( %var ( "desc" ) 
                  , %con ( "writable" ) ) , %con ( false ) ) ) , %emptyStmt ) 
                  , %seq ( %exp ( %bop ( %assign , %mem ( %var ( "desc" ) , 
                  %con ( "configurable" ) ) , %con ( false ) ) ) , %exp ( 
                  %call ( %mem ( %var ( "Object" ) , %con ( "defineProperty" )
                   ) , %cons ( %var ( "O" ) , %cons ( %mem ( %var ( "names" ) 
                  , %var ( "i" ) ) , %cons ( %var ( "desc" ) , %nil ) ) ) ) ) 
                  ) ) ) ) ) , %seq ( %exp ( %call ( %var ( 
                  "SetInternalProperty" ) , %cons ( %var ( "O" ) , %cons ( 
                  %con ( "Extensible" ) , %cons ( %con ( false ) , %nil ) ) ) 
                  ) ) , %return ( %var ( "O" ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 36 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.preventExtensions" ) , %nil ) ) )
                   , %emptyStmt ) , %seq ( %exp ( %call ( %var ( 
                  "SetInternalProperty" ) , %cons ( %var ( "O" ) , %cons ( 
                  %con ( "Extensible" ) , %cons ( %con ( false ) , %nil ) ) ) 
                  ) ) , %return ( %var ( "O" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 38 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.isSealed" ) , %nil ) ) ) , 
                  %emptyStmt ) , %seq ( %seq ( %vdecl ( "names" ) , %exp ( 
                  %bop ( %assign , %var ( "names" ) , %call ( %mem ( %var ( 
                  "Object" ) , %con ( "getOwnPropertyNames" ) ) , %cons ( %var
                   ( "O" ) , %nil ) ) ) ) ) , %seq ( %label ( "" , %for ( %seq
                   ( %vdecl ( "i" ) , %exp ( %bop ( %assign , %var ( "i" ) , 
                  %con ( 0 ) ) ) ) , %bop ( %lt , %var ( "i" ) , %mem ( %var (
                   "names" ) , %con ( "length" ) ) ) , %pre ( %inc , %var ( 
                  "i" ) ) , %seq ( %seq ( %vdecl ( "desc" ) , %exp ( %bop ( 
                  %assign , %var ( "desc" ) , %call ( %mem ( %var ( "Object" )
                   , %con ( "getOwnPropertyDescriptor" ) ) , %cons ( %var ( 
                  "O" ) , %cons ( %mem ( %var ( "names" ) , %var ( "i" ) ) , 
                  %nil ) ) ) ) ) ) , %if ( %mem ( %var ( "desc" ) , %con ( 
                  "configurable" ) ) , %return ( %con ( false ) ) , %emptyStmt
                   ) ) ) ) , %seq ( %if ( %call ( %var ( "GetInternalProperty"
                   ) , %cons ( %var ( "O" ) , %cons ( %con ( "Extensible" ) , 
                  %nil ) ) ) , %return ( %con ( false ) ) , %emptyStmt ) , 
                  %return ( %con ( true ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 40 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.isFrozen" ) , %nil ) ) ) , 
                  %emptyStmt ) , %seq ( %seq ( %vdecl ( "names" ) , %exp ( 
                  %bop ( %assign , %var ( "names" ) , %call ( %mem ( %var ( 
                  "Object" ) , %con ( "getOwnPropertyNames" ) ) , %cons ( %var
                   ( "O" ) , %nil ) ) ) ) ) , %seq ( %label ( "" , %for ( %seq
                   ( %vdecl ( "i" ) , %exp ( %bop ( %assign , %var ( "i" ) , 
                  %con ( 0 ) ) ) ) , %bop ( %lt , %var ( "i" ) , %mem ( %var (
                   "names" ) , %con ( "length" ) ) ) , %pre ( %inc , %var ( 
                  "i" ) ) , %seq ( %seq ( %vdecl ( "desc" ) , %exp ( %bop ( 
                  %assign , %var ( "desc" ) , %call ( %mem ( %var ( "Object" )
                   , %con ( "getOwnPropertyDescriptor" ) ) , %cons ( %var ( 
                  "O" ) , %cons ( %mem ( %var ( "names" ) , %var ( "i" ) ) , 
                  %nil ) ) ) ) ) ) , %seq ( %if ( %bop ( %or , %call ( %mem ( 
                  %var ( "desc" ) , %con ( "hasOwnProperty" ) ) , %cons ( %con
                   ( "value" ) , %nil ) ) , %call ( %mem ( %var ( "desc" ) , 
                  %con ( "hasOwnProperty" ) ) , %cons ( %con ( "writable" ) , 
                  %nil ) ) ) , %if ( %mem ( %var ( "desc" ) , %con ( 
                  "writable" ) ) , %return ( %con ( false ) ) , %emptyStmt ) ,
                   %emptyStmt ) , %if ( %mem ( %var ( "desc" ) , %con ( 
                  "configurable" ) ) , %return ( %con ( false ) ) , %emptyStmt
                   ) ) ) ) ) , %seq ( %if ( %call ( %var ( 
                  "GetInternalProperty" ) , %cons ( %var ( "O" ) , %cons ( 
                  %con ( "Extensible" ) , %nil ) ) ) , %return ( %con ( false 
                  ) ) , %emptyStmt ) , %return ( %con ( true ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 42 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.isExtensible" ) , %nil ) ) ) , 
                  %emptyStmt ) , %return ( %call ( %var ( 
                  "GetInternalProperty" ) , %cons ( %var ( "O" ) , %cons ( 
                  %con ( "Extensible" ) , %nil ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 44 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "O" ) , %nil ) ) ) , %throw ( 
                  %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Object.keys" ) , %nil ) ) ) , %emptyStmt
                   ) , %seq ( %seq ( %vdecl ( "names" ) , %exp ( %bop ( 
                  %assign , %var ( "names" ) , %new ( %var ( "Array" ) , %nil 
                  ) ) ) ) , %seq ( %label ( "" , %forin ( %vdecl ( "name" ) , 
                  %var ( "name" ) , %var ( "O" ) , %if ( %call ( %mem ( %var (
                   "O" ) , %con ( "hasOwnProperty" ) ) , %cons ( %var ( "name"
                   ) , %nil ) ) , %exp ( %call ( %mem ( %var ( "names" ) , 
                  %con ( "push" ) ) , %cons ( %var ( "name" ) , %nil ) ) ) , 
                  %emptyStmt ) ) ) , %return ( %var ( "names" ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "O" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 46 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %label ( "" , %switch ( %con ( %this ) , %seq ( 
                  %case ( %var ( "undefined" ) , %return ( %con ( 
                  "[object Undefined]" ) ) ) , %seq ( %case ( %con ( %null ) ,
                   %return ( %con ( "[object Null]" ) ) ) , %emptyStmt ) ) , 
                  %default ( %return ( %bop ( %plus , %bop ( %plus , %con ( 
                  "[object " ) , %call ( %var ( "GetInternalProperty" ) , 
                  %cons ( %call ( %var ( "ToObject" ) , %cons ( %con ( %this )
                   , %nil ) ) , %cons ( %con ( "Class" ) , %nil ) ) ) ) , %con
                   ( "]" ) ) ) ) , %emptyStmt ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 48 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %call ( %mem ( %call ( %var ( "ToObject" 
                  ) , %cons ( %con ( %this ) , %nil ) ) , %con ( "toString" ) 
                  ) , %nil ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 50 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %call ( %var ( "ToObject" ) , %cons ( 
                  %con ( %this ) , %nil ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 52 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "desc" ) , %exp ( %bop ( 
                  %assign , %var ( "desc" ) , %call ( %mem ( %var ( "Object" )
                   , %con ( "getOwnPropertyDescriptor" ) ) , %cons ( %call ( 
                  %var ( "ToObject" ) , %cons ( %con ( %this ) , %nil ) ) , 
                  %cons ( %call ( %var ( "ToString" ) , %cons ( %var ( "V" ) ,
                   %nil ) ) , %nil ) ) ) ) ) ) , %seq ( %if ( %bop ( %eqs , 
                  %var ( "desc" ) , %var ( "undefined" ) ) , %return ( %con ( 
                  false ) ) , %emptyStmt ) , %return ( %con ( true ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "V" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 54 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "V" ) , %nil ) ) ) , %return (
                   %con ( false ) ) , %emptyStmt ) , %seq ( %seq ( %vdecl ( 
                  "o" ) , %exp ( %bop ( %assign , %var ( "o" ) , %call ( %var 
                  ( "ToObject" ) , %cons ( %con ( %this ) , %nil ) ) ) ) ) , 
                  %label ( "" , %while ( %con ( true ) , %seq ( %exp ( %bop ( 
                  %assign , %var ( "V" ) , %call ( %mem ( %var ( "Object" ) , 
                  %con ( "getPrototypeOf" ) ) , %cons ( %var ( "V" ) , %nil ) 
                  ) ) ) , %seq ( %if ( %bop ( %eqs , %var ( "V" ) , %con ( 
                  %null ) ) , %return ( %con ( false ) ) , %emptyStmt ) , %if 
                  ( %bop ( %eqs , %var ( "V" ) , %var ( "o" ) ) , %return ( 
                  %con ( true ) ) , %emptyStmt ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "V" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 56 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "desc" ) , %exp ( %bop ( 
                  %assign , %var ( "desc" ) , %call ( %mem ( %var ( "Object" )
                   , %con ( "getOwnPropertyDescriptor" ) ) , %cons ( %call ( 
                  %var ( "ToObject" ) , %cons ( %con ( %this ) , %nil ) ) , 
                  %cons ( %call ( %var ( "ToString" ) , %cons ( %var ( "V" ) ,
                   %nil ) ) , %nil ) ) ) ) ) ) , %seq ( %if ( %bop ( %eqs , 
                  %var ( "desc" ) , %var ( "undefined" ) ) , %return ( %con ( 
                  false ) ) , %emptyStmt ) , %return ( %mem ( %var ( "desc" ) 
                  , %con ( "enumerable" ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "V" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 58 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsFunction" ) , %cons ( %con ( %this ) , %nil ) ) ) , 
                  %throw ( %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Function.prototype.toString" ) , %nil ) 
                  ) ) , %emptyStmt ) , %return ( %call ( %var ( 
                  "FunctionPrototypeToString" ) , %cons ( %con ( %this ) , 
                  %nil ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 60 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsFunction" ) , %cons ( %con ( %this ) , %nil ) ) ) , 
                  %throw ( %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Function.prototype.apply" ) , %nil ) ) )
                   , %emptyStmt ) , %return ( %call ( %var ( 
                  "FunctionPrototypeApply" ) , %cons ( %con ( %this ) , %cons 
                  ( %var ( "thisArg" ) , %cons ( %var ( "argArray" ) , %nil ) 
                  ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "thisArg" ) , %cons ( 
                  %var ( "argArray" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 62 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsFunction" ) , %cons ( %con ( %this ) , %nil ) ) ) , 
                  %throw ( %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Function.prototype.call" ) , %nil ) ) ) 
                  , %emptyStmt ) , %seq ( %seq ( %vdecl ( "argArray" ) , %exp 
                  ( %bop ( %assign , %var ( "argArray" ) , %arr ( %nil ) ) ) )
                   , %seq ( %label ( "" , %for ( %seq ( %vdecl ( "i" ) , %exp 
                  ( %bop ( %assign , %var ( "i" ) , %con ( 1 ) ) ) ) , %bop ( 
                  %lt , %var ( "i" ) , %mem ( %var ( "arguments" ) , %con ( 
                  "length" ) ) ) , %pre ( %inc , %var ( "i" ) ) , %exp ( %call
                   ( %mem ( %var ( "argArray" ) , %con ( "push" ) ) , %cons ( 
                  %mem ( %var ( "arguments" ) , %var ( "i" ) ) , %nil ) ) ) ) 
                  ) , %return ( %call ( %mem ( %con ( %this ) , %con ( "apply"
                   ) ) , %cons ( %var ( "thisArg" ) , %cons ( %var ( 
                  "argArray" ) , %nil ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "thisArg" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 64 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsFunction" ) , %cons ( %con ( %this ) , %nil ) ) ) , 
                  %throw ( %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Function.prototype.bind" ) , %nil ) ) ) 
                  , %emptyStmt ) , %seq ( %seq ( %vdecl ( "argArray" ) , %exp 
                  ( %bop ( %assign , %var ( "argArray" ) , %arr ( %nil ) ) ) )
                   , %seq ( %label ( "" , %for ( %seq ( %vdecl ( "i" ) , %exp 
                  ( %bop ( %assign , %var ( "i" ) , %con ( 1 ) ) ) ) , %bop ( 
                  %lt , %var ( "i" ) , %mem ( %var ( "arguments" ) , %con ( 
                  "length" ) ) ) , %pre ( %inc , %var ( "i" ) ) , %exp ( %call
                   ( %mem ( %var ( "argArray" ) , %con ( "push" ) ) , %cons ( 
                  %mem ( %var ( "arguments" ) , %var ( "i" ) ) , %nil ) ) ) ) 
                  ) , %return ( %call ( %var ( "FunctionPrototypeBind" ) , 
                  %cons ( %con ( %this ) , %cons ( %var ( "thisArg" ) , %cons 
                  ( %var ( "argArray" ) , %nil ) ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "thisArg" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 66 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %var ( "arg" ) , %nil ) ) ) , %return
                   ( %con ( false ) ) , %emptyStmt ) , %return ( %bop ( %eqs ,
                   %call ( %var ( "GetInternalProperty" ) , %cons ( %var ( 
                  "arg" ) , %cons ( %con ( "Class" ) , %nil ) ) ) , %con ( 
                  "Array" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "arg" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 68 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "array" ) , %exp ( %bop ( 
                  %assign , %var ( "array" ) , %call ( %var ( "ToObject" ) , 
                  %cons ( %con ( %this ) , %nil ) ) ) ) ) , %seq ( %seq ( 
                  %vdecl ( "func" ) , %exp ( %bop ( %assign , %var ( "func" ) 
                  , %mem ( %var ( "array" ) , %con ( "join" ) ) ) ) ) , %seq (
                   %if ( %pre ( %bang , %call ( %var ( "IsCallable" ) , %cons 
                  ( %var ( "func" ) , %nil ) ) ) , %exp ( %bop ( %assign , 
                  %var ( "func" ) , %mem ( %mem ( %var ( "Object" ) , %con ( 
                  "prototype" ) ) , %con ( "toString" ) ) ) ) , %emptyStmt ) ,
                   %return ( %call ( %mem ( %var ( "func" ) , %con ( "call" ) 
                  ) , %cons ( %var ( "array" ) , %nil ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 70 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.toLocaleString" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 72 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "o" ) , %exp ( %bop ( 
                  %assign , %var ( "o" ) , %call ( %var ( "ToObject" ) , %cons
                   ( %con ( %this ) , %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "a" ) , %exp ( %bop ( %assign , %var ( "a" ) , %new ( %var (
                   "Array" ) , %nil ) ) ) ) , %seq ( %exp ( %call ( %var ( 
                  "merge" ) , %cons ( %var ( "a" ) , %cons ( %var ( "o" ) , 
                  %nil ) ) ) ) , %seq ( %label ( "" , %for ( %seq ( %vdecl ( 
                  "i" ) , %exp ( %bop ( %assign , %var ( "i" ) , %con ( 0 ) ) 
                  ) ) , %bop ( %lt , %var ( "i" ) , %mem ( %var ( "arguments" 
                  ) , %con ( "length" ) ) ) , %pre ( %inc , %var ( "i" ) ) , 
                  %exp ( %call ( %var ( "merge" ) , %cons ( %var ( "a" ) , 
                  %cons ( %mem ( %var ( "arguments" ) , %var ( "i" ) ) , %nil 
                  ) ) ) ) ) ) , %seq ( %fdecl ( "merge" , %cons ( %var ( "arr"
                   ) , %cons ( %var ( "elem" ) , %nil ) ) , %if ( %call ( %mem
                   ( %var ( "Array" ) , %con ( "isArray" ) ) , %cons ( %var ( 
                  "elem" ) , %nil ) ) , %label ( "" , %for ( %seq ( %vdecl ( 
                  "k" ) , %exp ( %bop ( %assign , %var ( "k" ) , %con ( 0 ) ) 
                  ) ) , %bop ( %lt , %var ( "k" ) , %mem ( %var ( "elem" ) , 
                  %con ( "length" ) ) ) , %pre ( %inc , %var ( "k" ) ) , %exp 
                  ( %call ( %mem ( %var ( "arr" ) , %con ( "push" ) ) , %cons 
                  ( %mem ( %var ( "elem" ) , %var ( "k" ) ) , %nil ) ) ) ) ) ,
                   %exp ( %call ( %mem ( %var ( "arr" ) , %con ( "push" ) ) , 
                  %cons ( %var ( "elem" ) , %nil ) ) ) ) ) , %return ( %var ( 
                  "a" ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "_" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 74 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "o" ) , %exp ( %bop ( 
                  %assign , %var ( "o" ) , %call ( %var ( "ToObject" ) , %cons
                   ( %con ( %this ) , %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "len" ) , %exp ( %bop ( %assign , %var ( "len" ) , %call ( 
                  %var ( "ToUint32" ) , %cons ( %mem ( %var ( "o" ) , %con ( 
                  "length" ) ) , %nil ) ) ) ) ) , %seq ( %if ( %bop ( %eqs , 
                  %var ( "separator" ) , %var ( "undefined" ) ) , %exp ( %bop 
                  ( %assign , %var ( "separator" ) , %con ( "," ) ) ) , %exp (
                   %bop ( %assign , %var ( "separator" ) , %call ( %var ( 
                  "ToString" ) , %cons ( %var ( "separator" ) , %nil ) ) ) ) )
                   , %seq ( %if ( %bop ( %eqs , %var ( "len" ) , %con ( 0 ) ) 
                  , %return ( %con ( "" ) ) , %emptyStmt ) , %seq ( %seq ( 
                  %vdecl ( "r" ) , %exp ( %bop ( %assign , %var ( "r" ) , 
                  %call ( %var ( "get" ) , %cons ( %var ( "o" ) , %cons ( %con
                   ( 0 ) , %nil ) ) ) ) ) ) , %seq ( %label ( "" , %for ( %seq
                   ( %vdecl ( "i" ) , %exp ( %bop ( %assign , %var ( "i" ) , 
                  %con ( 1 ) ) ) ) , %bop ( %lt , %var ( "i" ) , %var ( "len" 
                  ) ) , %pre ( %inc , %var ( "i" ) ) , %exp ( %bopassign ( 
                  %plus , %var ( "r" ) , %bop ( %plus , %var ( "separator" ) ,
                   %call ( %var ( "get" ) , %cons ( %var ( "o" ) , %cons ( 
                  %var ( "i" ) , %nil ) ) ) ) ) ) ) ) , %seq ( %fdecl ( "get" 
                  , %cons ( %var ( "o" ) , %cons ( %var ( "i" ) , %nil ) ) , 
                  %return ( %cond ( %bop ( %or , %bop ( %eqs , %mem ( %var ( 
                  "o" ) , %var ( "i" ) ) , %var ( "undefined" ) ) , %bop ( 
                  %eqs , %mem ( %var ( "o" ) , %var ( "i" ) ) , %con ( %null )
                   ) ) , %con ( "" ) , %call ( %var ( "ToString" ) , %cons ( 
                  %mem ( %var ( "o" ) , %var ( "i" ) ) , %nil ) ) ) ) ) , 
                  %return ( %var ( "r" ) ) ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "separator" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 76 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.pop" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 78 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "o" ) , %exp ( %bop ( 
                  %assign , %var ( "o" ) , %call ( %var ( "ToObject" ) , %cons
                   ( %con ( %this ) , %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "len" ) , %exp ( %bop ( %assign , %var ( "len" ) , %call ( 
                  %var ( "ToUint32" ) , %cons ( %mem ( %var ( "o" ) , %con ( 
                  "length" ) ) , %nil ) ) ) ) ) , %seq ( %label ( "" , %for ( 
                  %seq ( %vdecl ( "i" ) , %exp ( %bop ( %assign , %var ( "i" )
                   , %con ( 0 ) ) ) ) , %bop ( %lt , %var ( "i" ) , %mem ( 
                  %var ( "arguments" ) , %con ( "length" ) ) ) , %pre ( %inc ,
                   %var ( "i" ) ) , %exp ( %bop ( %assign , %mem ( %var ( "o" 
                  ) , %bop ( %plus , %var ( "len" ) , %var ( "i" ) ) ) , %mem 
                  ( %var ( "arguments" ) , %var ( "i" ) ) ) ) ) ) , %return ( 
                  %mem ( %var ( "o" ) , %con ( "length" ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "_" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 80 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.reverse" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 82 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.shift" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 84 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.slice" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "start" ) , %cons ( %var
                   ( "end" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 86 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "o" ) , %exp ( %bop ( 
                  %assign , %var ( "o" ) , %call ( %var ( "ToObject" ) , %cons
                   ( %con ( %this ) , %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "len" ) , %exp ( %bop ( %assign , %var ( "len" ) , %mem ( 
                  %var ( "o" ) , %con ( "length" ) ) ) ) ) , %seq ( %if ( %bop
                   ( %eqs , %var ( "comparefn" ) , %var ( "undefined" ) ) , 
                  %exp ( %bop ( %assign , %var ( "comparefn" ) , %fun ( %cons 
                  ( %var ( "x" ) , %cons ( %var ( "y" ) , %nil ) ) , %if ( 
                  %bop ( %gt , %call ( %var ( "String" ) , %cons ( %var ( "x" 
                  ) , %nil ) ) , %call ( %var ( "String" ) , %cons ( %var ( 
                  "y" ) , %nil ) ) ) , %return ( %con ( 1 ) ) , %return ( %con
                   ( -1 ) ) ) ) ) ) , %emptyStmt ) , %seq ( %if ( %bop ( %ge ,
                   %var ( "len" ) , %con ( 2 ) ) , %seq ( %label ( "" , %for (
                   %seq ( %vdecl ( "start" ) , %exp ( %bop ( %assign , %var ( 
                  "start" ) , %bop ( %lshift , %bop ( %rshift , %bop ( %minus 
                  , %var ( "len" ) , %con ( 2 ) ) , %con ( 1 ) ) , %con ( 1 ) 
                  ) ) ) ) , %bop ( %ge , %var ( "start" ) , %con ( 0 ) ) , 
                  %bopassign ( %minus , %var ( "start" ) , %con ( 2 ) ) , %if 
                  ( %bop ( %gt , %call ( %var ( "comparefn" ) , %cons ( %mem (
                   %var ( "o" ) , %var ( "start" ) ) , %cons ( %mem ( %var ( 
                  "o" ) , %bop ( %plus , %var ( "start" ) , %con ( 1 ) ) ) , 
                  %nil ) ) ) , %con ( 0 ) ) , %seq ( %seq ( %vdecl ( "tmp" ) ,
                   %exp ( %bop ( %assign , %var ( "tmp" ) , %mem ( %var ( "o" 
                  ) , %var ( "start" ) ) ) ) ) , %seq ( %exp ( %bop ( %assign 
                  , %mem ( %var ( "o" ) , %var ( "start" ) ) , %mem ( %var ( 
                  "o" ) , %bop ( %plus , %var ( "start" ) , %con ( 1 ) ) ) ) )
                   , %exp ( %bop ( %assign , %mem ( %var ( "o" ) , %bop ( 
                  %plus , %var ( "start" ) , %con ( 1 ) ) ) , %var ( "tmp" ) )
                   ) ) ) , %emptyStmt ) ) ) , %if ( %bop ( %gt , %var ( "len" 
                  ) , %con ( 2 ) ) , %seq ( %seq ( %vdecl ( "a1" ) , %exp ( 
                  %bop ( %assign , %var ( "a1" ) , %var ( "o" ) ) ) ) , %seq (
                   %seq ( %vdecl ( "a2" ) , %exp ( %bop ( %assign , %var ( 
                  "a2" ) , %new ( %var ( "Array" ) , %cons ( %var ( "len" ) , 
                  %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( "k" ) , %exp ( %bop 
                  ( %assign , %var ( "k" ) , %con ( 1 ) ) ) ) , %seq ( %seq ( 
                  %vdecl ( "size" ) , %exp ( %bop ( %assign , %var ( "size" ) 
                  , %con ( 2 ) ) ) ) , %seq ( %label ( "" , %do ( %seq ( %seq 
                  ( %vdecl ( "start" ) , %exp ( %bop ( %assign , %var ( 
                  "start" ) , %bop ( %lshift , %bop ( %rshift , %bop ( %minus 
                  , %var ( "len" ) , %con ( 1 ) ) , %bop ( %plus , %var ( "k" 
                  ) , %con ( 1 ) ) ) , %bop ( %plus , %var ( "k" ) , %con ( 1 
                  ) ) ) ) ) ) , %seq ( %seq ( %vdecl ( "j_end" ) , %exp ( %bop
                   ( %assign , %var ( "j_end" ) , %var ( "len" ) ) ) ) , %seq 
                  ( %seq ( %vdecl ( "i_end" ) , %exp ( %bop ( %assign , %var (
                   "i_end" ) , %bop ( %plus , %var ( "start" ) , %var ( "size"
                   ) ) ) ) ) , %seq ( %if ( %bop ( %gt , %var ( "i_end" ) , 
                  %var ( "len" ) ) , %exp ( %bop ( %assign , %var ( "i_end" ) 
                  , %var ( "len" ) ) ) , %emptyStmt ) , %seq ( %label ( "" , 
                  %while ( %bop ( %ge , %var ( "start" ) , %con ( 0 ) ) , %seq
                   ( %seq ( %vdecl ( "i" ) , %exp ( %bop ( %assign , %var ( 
                  "i" ) , %var ( "start" ) ) ) ) , %seq ( %seq ( %vdecl ( "j" 
                  ) , %exp ( %bop ( %assign , %var ( "j" ) , %var ( "i_end" ) 
                  ) ) ) , %seq ( %seq ( %vdecl ( "x" ) , %exp ( %bop ( %assign
                   , %var ( "x" ) , %var ( "start" ) ) ) ) , %seq ( %label ( 
                  "" , %for ( %exp ( %emptyExp ) , %emptyExp , %emptyExp , %if
                   ( %bop ( %lt , %var ( "i" ) , %var ( "i_end" ) ) , %if ( 
                  %bop ( %lt , %var ( "j" ) , %var ( "j_end" ) ) , %if ( %bop 
                  ( %gt , %call ( %var ( "comparefn" ) , %cons ( %mem ( %var (
                   "a1" ) , %var ( "i" ) ) , %cons ( %mem ( %var ( "a1" ) , 
                  %var ( "j" ) ) , %nil ) ) ) , %con ( 0 ) ) , %exp ( %bop ( 
                  %assign , %mem ( %var ( "a2" ) , %post ( %var ( "x" ) , %inc
                   ) ) , %mem ( %var ( "a1" ) , %post ( %var ( "j" ) , %inc ) 
                  ) ) ) , %exp ( %bop ( %assign , %mem ( %var ( "a2" ) , %post
                   ( %var ( "x" ) , %inc ) ) , %mem ( %var ( "a1" ) , %post ( 
                  %var ( "i" ) , %inc ) ) ) ) ) , %seq ( %label ( "" , %while 
                  ( %bop ( %lt , %var ( "i" ) , %var ( "i_end" ) ) , %exp ( 
                  %bop ( %assign , %mem ( %var ( "a2" ) , %post ( %var ( "x" )
                   , %inc ) ) , %mem ( %var ( "a1" ) , %post ( %var ( "i" ) , 
                  %inc ) ) ) ) ) ) , %break ( "" ) ) ) , %seq ( %label ( "" , 
                  %while ( %bop ( %lt , %var ( "j" ) , %var ( "j_end" ) ) , 
                  %exp ( %bop ( %assign , %mem ( %var ( "a2" ) , %post ( %var 
                  ( "x" ) , %inc ) ) , %mem ( %var ( "a1" ) , %post ( %var ( 
                  "j" ) , %inc ) ) ) ) ) ) , %break ( "" ) ) ) ) ) , %seq ( 
                  %exp ( %bop ( %assign , %var ( "j_end" ) , %var ( "start" ) 
                  ) ) , %seq ( %exp ( %bopassign ( %minus , %var ( "start" ) ,
                   %bop ( %times , %con ( 2 ) , %var ( "size" ) ) ) ) , %exp (
                   %bop ( %assign , %var ( "i_end" ) , %bop ( %plus , %var ( 
                  "start" ) , %var ( "size" ) ) ) ) ) ) ) ) ) ) ) ) , %seq ( 
                  %seq ( %vdecl ( "t" ) , %exp ( %bop ( %assign , %var ( "t" )
                   , %var ( "a1" ) ) ) ) , %seq ( %exp ( %bop ( %assign , %var
                   ( "a1" ) , %var ( "a2" ) ) ) , %seq ( %exp ( %bop ( %assign
                   , %var ( "a2" ) , %var ( "t" ) ) ) , %seq ( %exp ( %post ( 
                  %var ( "k" ) , %inc ) ) , %exp ( %bopassign ( %times , %var 
                  ( "size" ) , %con ( 2 ) ) ) ) ) ) ) ) ) ) ) ) , %bop ( %gt ,
                   %var ( "len" ) , %var ( "size" ) ) ) ) , %if ( %bop ( %eqs 
                  , %bop ( %amp , %var ( "k" ) , %con ( 1 ) ) , %con ( 0 ) ) ,
                   %label ( "" , %for ( %seq ( %vdecl ( "i" ) , %exp ( %bop ( 
                  %assign , %var ( "i" ) , %bop ( %minus , %var ( "len" ) , 
                  %con ( 1 ) ) ) ) ) , %bop ( %ge , %var ( "i" ) , %con ( 0 ) 
                  ) , %post ( %var ( "i" ) , %dec ) , %exp ( %bop ( %assign , 
                  %mem ( %var ( "o" ) , %var ( "i" ) ) , %mem ( %var ( "a1" ) 
                  , %var ( "i" ) ) ) ) ) ) , %emptyStmt ) ) ) ) ) ) , 
                  %emptyStmt ) ) , %emptyStmt ) , %return ( %var ( "o" ) ) ) )
                   ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "comparefn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 88 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.splice" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "start" ) , %cons ( %var
                   ( "deleteCount" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 90 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.unshift" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "_" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 92 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.indexOf" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "searchElement" ) , %nil
                   )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 94 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.lastIndexOf" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "searchElement" ) , %nil
                   )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 96 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.every" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "callbackfn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 98 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.some" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "callbackfn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 100 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.forEach" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "callbackfn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 102 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.map" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "callbackfn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 104 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.filter" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "callbackfn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 106 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.reduce" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "callbackfn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 108 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Array.prototype.reduceRight" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "callbackfn" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 110 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "s" ) , %exp ( %bop ( 
                  %assign , %var ( "s" ) , %con ( "" ) ) ) ) , %seq ( %label (
                   "" , %for ( %seq ( %vdecl ( "i" ) , %exp ( %bop ( %assign ,
                   %var ( "i" ) , %con ( 0 ) ) ) ) , %bop ( %lt , %var ( "i" )
                   , %mem ( %var ( "arguments" ) , %con ( "length" ) ) ) , 
                  %pre ( %inc , %var ( "i" ) ) , %exp ( %bopassign ( %plus , 
                  %var ( "s" ) , %call ( %var ( "Int2Char" ) , %cons ( %call (
                   %var ( "ToUint16" ) , %cons ( %mem ( %var ( "arguments" ) ,
                   %var ( "i" ) ) , %nil ) ) , %nil ) ) ) ) ) ) , %return ( 
                  %var ( "s" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "_" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 112 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %call ( %mem ( %mem ( %mem ( %var ( 
                  "String" ) , %con ( "prototype" ) ) , %con ( "valueOf" ) ) ,
                   %con ( "call" ) ) , %cons ( %con ( %this ) , %nil ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 114 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %if ( %bop ( %eqs , %pre ( %typeof , %con ( %this )
                   ) , %con ( "string" ) ) , %return ( %con ( %this ) ) , %if 
                  ( %bop ( %and , %call ( %var ( "IsObject" ) , %cons ( %con (
                   %this ) , %nil ) ) , %bop ( %eqs , %call ( %var ( 
                  "GetInternalProperty" ) , %cons ( %con ( %this ) , %cons ( 
                  %con ( "Class" ) , %nil ) ) ) , %con ( "String" ) ) ) , 
                  %return ( %call ( %var ( "GetInternalProperty" ) , %cons ( 
                  %con ( %this ) , %cons ( %con ( "PrimitiveValue" ) , %nil ) 
                  ) ) ) , %throw ( %call ( %var ( "TypeError" ) , %cons ( %con
                   ( "Invalid arguments: String.prototype.valueOf" ) , %nil ) 
                  ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 116 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %call ( %var ( "CheckObjectCoercible"
                   ) , %cons ( %con ( %this ) , %nil ) ) ) , %seq ( %seq ( 
                  %vdecl ( "s" ) , %exp ( %bop ( %assign , %var ( "s" ) , 
                  %call ( %var ( "ToString" ) , %cons ( %con ( %this ) , %nil 
                  ) ) ) ) ) , %seq ( %seq ( %vdecl ( "position" ) , %exp ( 
                  %bop ( %assign , %var ( "position" ) , %call ( %var ( 
                  "ToInteger" ) , %cons ( %var ( "pos" ) , %nil ) ) ) ) ) , 
                  %seq ( %seq ( %vdecl ( "size" ) , %exp ( %bop ( %assign , 
                  %var ( "size" ) , %call ( %var ( "LengthString" ) , %cons ( 
                  %var ( "s" ) , %nil ) ) ) ) ) , %if ( %bop ( %or , %bop ( 
                  %lt , %var ( "position" ) , %con ( 0 ) ) , %bop ( %ge , %var
                   ( "position" ) , %var ( "size" ) ) ) , %return ( %con ( "" 
                  ) ) , %return ( %call ( %var ( "CharAt" ) , %cons ( %var ( 
                  "s" ) , %cons ( %var ( "position" ) , %nil ) ) ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "pos" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 118 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %call ( %var ( "CheckObjectCoercible"
                   ) , %cons ( %con ( %this ) , %nil ) ) ) , %seq ( %seq ( 
                  %vdecl ( "s" ) , %exp ( %bop ( %assign , %var ( "s" ) , 
                  %call ( %var ( "ToString" ) , %cons ( %con ( %this ) , %nil 
                  ) ) ) ) ) , %seq ( %seq ( %vdecl ( "position" ) , %exp ( 
                  %bop ( %assign , %var ( "position" ) , %call ( %var ( 
                  "ToInteger" ) , %cons ( %var ( "pos" ) , %nil ) ) ) ) ) , 
                  %seq ( %seq ( %vdecl ( "size" ) , %exp ( %bop ( %assign , 
                  %var ( "size" ) , %call ( %var ( "LengthString" ) , %cons ( 
                  %var ( "s" ) , %nil ) ) ) ) ) , %if ( %bop ( %or , %bop ( 
                  %lt , %var ( "position" ) , %con ( 0 ) ) , %bop ( %ge , %var
                   ( "position" ) , %var ( "size" ) ) ) , %return ( %var ( 
                  "NaN" ) ) , %return ( %call ( %var ( "Char2Int" ) , %cons ( 
                  %call ( %var ( "CharAt" ) , %cons ( %var ( "s" ) , %cons ( 
                  %var ( "position" ) , %nil ) ) ) , %nil ) ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "pos" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 120 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %call ( %var ( "CheckObjectCoercible"
                   ) , %cons ( %con ( %this ) , %nil ) ) ) , %seq ( %seq ( 
                  %vdecl ( "s" ) , %exp ( %bop ( %assign , %var ( "s" ) , 
                  %call ( %var ( "ToString" ) , %cons ( %con ( %this ) , %nil 
                  ) ) ) ) ) , %seq ( %seq ( %vdecl ( "r" ) , %exp ( %bop ( 
                  %assign , %var ( "r" ) , %var ( "s" ) ) ) ) , %seq ( %label 
                  ( "" , %for ( %seq ( %vdecl ( "i" ) , %exp ( %bop ( %assign 
                  , %var ( "i" ) , %con ( 0 ) ) ) ) , %bop ( %lt , %var ( "i" 
                  ) , %mem ( %var ( "arguments" ) , %con ( "length" ) ) ) , 
                  %pre ( %inc , %var ( "i" ) ) , %exp ( %bopassign ( %plus , 
                  %var ( "r" ) , %call ( %var ( "ToString" ) , %cons ( %mem ( 
                  %var ( "arguments" ) , %var ( "i" ) ) , %nil ) ) ) ) ) ) , 
                  %return ( %var ( "r" ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "_" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 122 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "position" ) , %exp ( %bop (
                   %assign , %var ( "position" ) , %mem ( %var ( "arguments" )
                   , %con ( 1 ) ) ) ) ) , %seq ( %exp ( %call ( %var ( 
                  "CheckObjectCoercible" ) , %cons ( %con ( %this ) , %nil ) )
                   ) , %seq ( %seq ( %vdecl ( "s" ) , %exp ( %bop ( %assign , 
                  %var ( "s" ) , %call ( %var ( "ToString" ) , %cons ( %con ( 
                  %this ) , %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "searchStr" ) , %exp ( %bop ( %assign , %var ( "searchStr" )
                   , %call ( %var ( "ToString" ) , %cons ( %var ( 
                  "searchString" ) , %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "pos" ) , %exp ( %bop ( %assign , %var ( "pos" ) , %cond ( 
                  %bop ( %eqs , %var ( "position" ) , %var ( "undefined" ) ) ,
                   %con ( 0 ) , %call ( %var ( "ToInteger" ) , %cons ( %var ( 
                  "position" ) , %nil ) ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "len" ) , %exp ( %bop ( %assign , %var ( "len" ) , %call ( 
                  %var ( "LengthString" ) , %cons ( %var ( "s" ) , %nil ) ) ) 
                  ) ) , %seq ( %seq ( %vdecl ( "start" ) , %exp ( %bop ( 
                  %assign , %var ( "start" ) , %call ( %mem ( %var ( "Math" ) 
                  , %con ( "min" ) ) , %cons ( %call ( %mem ( %var ( "Math" ) 
                  , %con ( "max" ) ) , %cons ( %var ( "pos" ) , %cons ( %con (
                   0 ) , %nil ) ) ) , %cons ( %var ( "len" ) , %nil ) ) ) ) ) 
                  ) , %return ( %call ( %var ( "FindString" ) , %cons ( %var (
                   "s" ) , %cons ( %var ( "searchStr" ) , %cons ( %var ( 
                  "start" ) , %nil ) ) ) ) ) ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "searchString" ) , %nil 
                  )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 124 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.lastIndexOf" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "searchString" ) , %nil 
                  )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 126 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.localeCompare" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "that" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 128 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.match" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "regexp" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 130 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %bop ( %eqs , %pre ( %typeof , %var ( 
                  "searchValue" ) ) , %con ( "string" ) ) , %seq ( %seq ( 
                  %vdecl ( "pos" ) , %exp ( %bop ( %assign , %var ( "pos" ) , 
                  %call ( %mem ( %con ( %this ) , %con ( "indexOf" ) ) , %cons
                   ( %var ( "searchValue" ) , %nil ) ) ) ) ) , %if ( %bop ( 
                  %eqs , %pre ( %typeof , %var ( "replaceValue" ) ) , %con ( 
                  "function" ) ) , %seq ( %seq ( %vdecl ( "ret" ) , %exp ( 
                  %bop ( %assign , %var ( "ret" ) , %call ( %var ( 
                  "replaceValue" ) , %cons ( %var ( "searchValue" ) , %cons ( 
                  %var ( "pos" ) , %cons ( %call ( %mem ( %con ( %this ) , 
                  %con ( "toString" ) ) , %nil ) , %nil ) ) ) ) ) ) ) , 
                  %return ( %call ( %mem ( %call ( %mem ( %con ( %this ) , 
                  %con ( "substring" ) ) , %cons ( %con ( 0 ) , %cons ( %var (
                   "pos" ) , %nil ) ) ) , %con ( "concat" ) ) , %cons ( %call 
                  ( %mem ( %new ( %var ( "String" ) , %cons ( %var ( "ret" ) ,
                   %nil ) ) , %con ( "toString" ) ) , %nil ) , %cons ( %call (
                   %mem ( %con ( %this ) , %con ( "substring" ) ) , %cons ( 
                  %bop ( %plus , %var ( "pos" ) , %call ( %var ( 
                  "LengthString" ) , %cons ( %var ( "searchValue" ) , %nil ) )
                   ) , %nil ) ) , %nil ) ) ) ) ) , %return ( %call ( %mem ( 
                  %call ( %mem ( %con ( %this ) , %con ( "substring" ) ) , 
                  %cons ( %con ( 0 ) , %cons ( %var ( "pos" ) , %nil ) ) ) , 
                  %con ( "concat" ) ) , %cons ( %call ( %mem ( %var ( 
                  "replaceValue" ) , %con ( "toString" ) ) , %nil ) , %cons ( 
                  %call ( %mem ( %con ( %this ) , %con ( "substring" ) ) , 
                  %cons ( %bop ( %plus , %var ( "pos" ) , %call ( %var ( 
                  "LengthString" ) , %cons ( %var ( "searchValue" ) , %nil ) )
                   ) , %nil ) ) , %nil ) ) ) ) ) ) , %if ( %bop ( %instanceof 
                  , %var ( "searchValue" ) , %var ( "RegExp" ) ) , %throw ( 
                  %con ( "NotImplemented: String.prototype.replace" ) ) , 
                  %emptyStmt ) ) , %return ( %call ( %mem ( %con ( %this ) , 
                  %con ( "toString" ) ) , %nil ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "searchValue" ) , %cons 
                  ( %var ( "replaceValue" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 132 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.search" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "regexp" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 134 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.slice" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "start" ) , %cons ( %var
                   ( "end" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 136 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "res" ) , %exp ( %bop ( 
                  %assign , %var ( "res" ) , %new ( %var ( "Array" ) , %nil ) 
                  ) ) ) , %seq ( %if ( %bop ( %eqs , %var ( "limit" ) , %con (
                   0 ) ) , %return ( %var ( "res" ) ) , %emptyStmt ) , %seq ( 
                  %seq ( %vdecl ( "len" ) , %exp ( %bop ( %assign , %var ( 
                  "len" ) , %mem ( %con ( %this ) , %con ( "length" ) ) ) ) ) 
                  , %seq ( %if ( %bop ( %eqs , %var ( "len" ) , %con ( 0 ) ) ,
                   %return ( %var ( "res" ) ) , %emptyStmt ) , %seq ( %if ( 
                  %bop ( %eqs , %var ( "separator" ) , %var ( "undefined" ) ) 
                  , %return ( %arr ( %cons ( %con ( %this ) , %nil ) ) ) , 
                  %emptyStmt ) , %seq ( %seq ( %vdecl ( "pos" ) , %exp ( %bop 
                  ( %assign , %var ( "pos" ) , %call ( %mem ( %con ( %this ) ,
                   %con ( "indexOf" ) ) , %cons ( %var ( "separator" ) , %nil 
                  ) ) ) ) ) , %seq ( %seq ( %vdecl ( "start" ) , %exp ( %bop (
                   %assign , %var ( "start" ) , %con ( 0 ) ) ) ) , %seq ( %seq
                   ( %vdecl ( "sepLen" ) , %exp ( %bop ( %assign , %var ( 
                  "sepLen" ) , %mem ( %var ( "separator" ) , %con ( "length" )
                   ) ) ) ) , %seq ( %label ( "" , %while ( %bop ( %ge , %var (
                   "pos" ) , %con ( 0 ) ) , %seq ( %exp ( %call ( %mem ( %var 
                  ( "res" ) , %con ( "push" ) ) , %cons ( %call ( %mem ( %con 
                  ( %this ) , %con ( "substring" ) ) , %cons ( %var ( "start" 
                  ) , %cons ( %var ( "pos" ) , %nil ) ) ) , %nil ) ) ) , %seq 
                  ( %if ( %bop ( %eqs , %mem ( %var ( "res" ) , %con ( 
                  "length" ) ) , %var ( "limit" ) ) , %return ( %var ( "res" )
                   ) , %emptyStmt ) , %seq ( %exp ( %bop ( %assign , %var ( 
                  "start" ) , %bop ( %plus , %var ( "pos" ) , %var ( "sepLen" 
                  ) ) ) ) , %exp ( %bop ( %assign , %var ( "pos" ) , %call ( 
                  %mem ( %con ( %this ) , %con ( "indexOf" ) ) , %cons ( %var 
                  ( "separator" ) , %cons ( %bop ( %plus , %var ( "pos" ) , 
                  %var ( "sepLen" ) ) , %nil ) ) ) ) ) ) ) ) ) ) , %seq ( %if 
                  ( %bop ( %le , %var ( "start" ) , %var ( "len" ) ) , %exp ( 
                  %call ( %mem ( %var ( "res" ) , %con ( "push" ) ) , %cons ( 
                  %call ( %mem ( %con ( %this ) , %con ( "substring" ) ) , 
                  %cons ( %var ( "start" ) , %nil ) ) , %nil ) ) ) , 
                  %emptyStmt ) , %return ( %var ( "res" ) ) ) ) ) ) ) ) ) ) ) 
                  )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "separator" ) , %cons ( 
                  %var ( "limit" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 138 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %call ( %var ( "CheckObjectCoercible"
                   ) , %cons ( %con ( %this ) , %nil ) ) ) , %seq ( %seq ( 
                  %vdecl ( "s" ) , %exp ( %bop ( %assign , %var ( "s" ) , 
                  %call ( %var ( "ToString" ) , %cons ( %con ( %this ) , %nil 
                  ) ) ) ) ) , %seq ( %seq ( %vdecl ( "len" ) , %exp ( %bop ( 
                  %assign , %var ( "len" ) , %call ( %var ( "LengthString" ) ,
                   %cons ( %var ( "s" ) , %nil ) ) ) ) ) , %seq ( %seq ( 
                  %vdecl ( "intStart" ) , %exp ( %bop ( %assign , %var ( 
                  "intStart" ) , %call ( %var ( "ToInteger" ) , %cons ( %var (
                   "start" ) , %nil ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "intEnd" ) , %exp ( %bop ( %assign , %var ( "intEnd" ) , 
                  %cond ( %bop ( %eqs , %var ( "end" ) , %var ( "undefined" ) 
                  ) , %var ( "len" ) , %call ( %var ( "ToInteger" ) , %cons ( 
                  %var ( "end" ) , %nil ) ) ) ) ) ) , %seq ( %seq ( %vdecl ( 
                  "finalStart" ) , %exp ( %bop ( %assign , %var ( "finalStart"
                   ) , %call ( %mem ( %var ( "Math" ) , %con ( "min" ) ) , 
                  %cons ( %call ( %mem ( %var ( "Math" ) , %con ( "max" ) ) , 
                  %cons ( %var ( "intStart" ) , %cons ( %con ( 0 ) , %nil ) ) 
                  ) , %cons ( %var ( "len" ) , %nil ) ) ) ) ) ) , %seq ( %seq 
                  ( %vdecl ( "finalEnd" ) , %exp ( %bop ( %assign , %var ( 
                  "finalEnd" ) , %call ( %mem ( %var ( "Math" ) , %con ( "min"
                   ) ) , %cons ( %call ( %mem ( %var ( "Math" ) , %con ( "max"
                   ) ) , %cons ( %var ( "intEnd" ) , %cons ( %con ( 0 ) , %nil
                   ) ) ) , %cons ( %var ( "len" ) , %nil ) ) ) ) ) ) , %seq ( 
                  %seq ( %vdecl ( "from" ) , %exp ( %bop ( %assign , %var ( 
                  "from" ) , %call ( %mem ( %var ( "Math" ) , %con ( "min" ) )
                   , %cons ( %var ( "finalStart" ) , %cons ( %var ( "finalEnd"
                   ) , %nil ) ) ) ) ) ) , %seq ( %seq ( %vdecl ( "to" ) , %exp
                   ( %bop ( %assign , %var ( "to" ) , %call ( %mem ( %var ( 
                  "Math" ) , %con ( "max" ) ) , %cons ( %var ( "finalStart" ) 
                  , %cons ( %var ( "finalEnd" ) , %nil ) ) ) ) ) ) , %return (
                   %call ( %var ( "SubstrString" ) , %cons ( %var ( "s" ) , 
                  %cons ( %var ( "from" ) , %cons ( %var ( "to" ) , %nil ) ) )
                   ) ) ) ) ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "start" ) , %cons ( %var
                   ( "end" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 140 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.toLowerCase" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 142 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.toLocaleLowerCase" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 144 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.toUpperCase" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 146 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: String.prototype.toLocaleUpperCase" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 148 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %call ( %var ( "CheckObjectCoercible"
                   ) , %cons ( %con ( %this ) , %nil ) ) ) , %seq ( %seq ( 
                  %vdecl ( "s" ) , %exp ( %bop ( %assign , %var ( "s" ) , 
                  %call ( %var ( "ToString" ) , %cons ( %con ( %this ) , %nil 
                  ) ) ) ) ) , %return ( %call ( %var ( "Trim" ) , %cons ( %var
                   ( "s" ) , %nil ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 150 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "b" ) , %exp ( %bop ( 
                  %assign , %var ( "b" ) , %call ( %mem ( %mem ( %mem ( %var (
                   "Boolean" ) , %con ( "prototype" ) ) , %con ( "valueOf" ) )
                   , %con ( "call" ) ) , %cons ( %con ( %this ) , %nil ) ) ) )
                   ) , %if ( %var ( "b" ) , %return ( %con ( "true" ) ) , 
                  %return ( %con ( "false" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 152 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %vdecl ( "b" ) , %seq ( %if ( %bop ( %eqs , 
                  %pre ( %typeof , %con ( %this ) ) , %con ( "boolean" ) ) , 
                  %exp ( %bop ( %assign , %var ( "b" ) , %con ( %this ) ) ) , 
                  %if ( %bop ( %and , %call ( %var ( "IsObject" ) , %cons ( 
                  %con ( %this ) , %nil ) ) , %bop ( %eqs , %call ( %var ( 
                  "GetInternalProperty" ) , %cons ( %con ( %this ) , %cons ( 
                  %con ( "Class" ) , %nil ) ) ) , %con ( "Boolean" ) ) ) , 
                  %exp ( %bop ( %assign , %var ( "b" ) , %call ( %var ( 
                  "GetInternalProperty" ) , %cons ( %con ( %this ) , %cons ( 
                  %con ( "PrimitiveValue" ) , %nil ) ) ) ) ) , %throw ( %call 
                  ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Invalid arguments: Boolean.prototype.valueOf" ) , %nil ) ) 
                  ) ) ) , %return ( %var ( "b" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 154 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "n" ) , %exp ( %bop ( 
                  %assign , %var ( "n" ) , %call ( %mem ( %mem ( %mem ( %var (
                   "Number" ) , %con ( "prototype" ) ) , %con ( "valueOf" ) ) 
                  , %con ( "call" ) ) , %cons ( %con ( %this ) , %nil ) ) ) ) 
                  ) , %seq ( %vdecl ( "r" ) , %seq ( %if ( %bop ( %eqs , %var 
                  ( "radix" ) , %var ( "undefined" ) ) , %exp ( %bop ( %assign
                   , %var ( "r" ) , %con ( 10 ) ) ) , %seq ( %exp ( %bop ( 
                  %assign , %var ( "r" ) , %call ( %var ( "ToInteger" ) , 
                  %cons ( %var ( "radix" ) , %nil ) ) ) ) , %if ( %pre ( %bang
                   , %bop ( %and , %bop ( %ge , %var ( "r" ) , %con ( 2 ) ) , 
                  %bop ( %le , %var ( "r" ) , %con ( 36 ) ) ) ) , %throw ( 
                  %call ( %var ( "RangeError" ) , %cons ( %con ( 
                  "Invalid arguments: Number.prototype.toString" ) , %nil ) ) 
                  ) , %emptyStmt ) ) ) , %return ( %call ( %var ( 
                  "NumberToString" ) , %cons ( %var ( "n" ) , %cons ( %var ( 
                  "r" ) , %nil ) ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "radix" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 156 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Number.prototype.toLocaleString" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 158 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %if ( %bop ( %eqs , %pre ( %typeof , %con ( %this )
                   ) , %con ( "string" ) ) , %return ( %con ( %this ) ) , %if 
                  ( %bop ( %and , %call ( %var ( "IsObject" ) , %cons ( %con (
                   %this ) , %nil ) ) , %bop ( %eqs , %call ( %var ( 
                  "GetInternalProperty" ) , %cons ( %con ( %this ) , %cons ( 
                  %con ( "Class" ) , %nil ) ) ) , %con ( "Number" ) ) ) , 
                  %return ( %call ( %var ( "GetInternalProperty" ) , %cons ( 
                  %con ( %this ) , %cons ( %con ( "PrimitiveValue" ) , %nil ) 
                  ) ) ) , %throw ( %call ( %var ( "TypeError" ) , %cons ( %con
                   ( "Invalid arguments: Number.prototype.valueOf" ) , %nil ) 
                  ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 160 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %call ( %var ( "NumberPrototypeToFixed" )
                   , %cons ( %con ( %this ) , %cons ( %var ( "fractionDigits" 
                  ) , %nil ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "fractionDigits" ) , 
                  %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 162 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Number.prototype.toExponential" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "fractionDigits" ) , 
                  %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 164 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( 
                  "NotImplemented: Number.prototype.toPrecision" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "precision" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 166 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %bop ( %assign , %var ( "x" ) , %call
                   ( %var ( "ToNumber" ) , %cons ( %var ( "x" ) , %nil ) ) ) )
                   , %if ( %bop ( %lt , %var ( "x" ) , %con ( 0 ) ) , %return 
                  ( %pre ( %minus , %var ( "x" ) ) ) , %return ( %var ( "x" ) 
                  ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 168 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.acos" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 170 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.asin" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 172 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.atan" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 174 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.atan2" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "y" ) , %cons ( %var ( 
                  "x" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 176 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %pre ( %minus , %call ( %mem ( %var ( 
                  "Math" ) , %con ( "floor" ) ) , %cons ( %pre ( %minus , %var
                   ( "x" ) ) , %nil ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 178 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.cos" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 180 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.exp" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 182 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %bop ( %assign , %var ( "x" ) , %call
                   ( %var ( "ToNumber" ) , %cons ( %var ( "x" ) , %nil ) ) ) )
                   , %return ( %call ( %var ( "MathFloor" ) , %cons ( %var ( 
                  "x" ) , %nil ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 184 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.log" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 186 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "max" ) , %exp ( %bop ( 
                  %assign , %var ( "max" ) , %pre ( %minus , %var ( "Infinity"
                   ) ) ) ) ) , %seq ( %label ( "" , %for ( %seq ( %vdecl ( "i"
                   ) , %exp ( %bop ( %assign , %var ( "i" ) , %con ( 0 ) ) ) )
                   , %bop ( %lt , %var ( "i" ) , %mem ( %var ( "arguments" ) ,
                   %con ( "length" ) ) ) , %pre ( %inc , %var ( "i" ) ) , %seq
                   ( %seq ( %vdecl ( "value" ) , %exp ( %bop ( %assign , %var 
                  ( "value" ) , %call ( %var ( "ToNumber" ) , %cons ( %mem ( 
                  %var ( "arguments" ) , %var ( "i" ) ) , %nil ) ) ) ) ) , %if
                   ( %call ( %var ( "isNaN" ) , %cons ( %var ( "value" ) , 
                  %nil ) ) , %return ( %var ( "NaN" ) ) , %if ( %bop ( %gt , 
                  %var ( "value" ) , %var ( "max" ) ) , %exp ( %bop ( %assign 
                  , %var ( "max" ) , %var ( "value" ) ) ) , %if ( %bop ( %and 
                  , %call ( %var ( "IsPositiveZero" ) , %cons ( %var ( "value"
                   ) , %nil ) ) , %call ( %var ( "IsNegativeZero" ) , %cons ( 
                  %var ( "max" ) , %nil ) ) ) , %exp ( %bop ( %assign , %var (
                   "max" ) , %var ( "value" ) ) ) , %emptyStmt ) ) ) ) ) ) , 
                  %return ( %var ( "max" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "value1" ) , %cons ( 
                  %var ( "value2" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 188 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %seq ( %vdecl ( "min" ) , %exp ( %bop ( 
                  %assign , %var ( "min" ) , %pre ( %plus , %var ( "Infinity" 
                  ) ) ) ) ) , %seq ( %label ( "" , %for ( %seq ( %vdecl ( "i" 
                  ) , %exp ( %bop ( %assign , %var ( "i" ) , %con ( 0 ) ) ) ) 
                  , %bop ( %lt , %var ( "i" ) , %mem ( %var ( "arguments" ) , 
                  %con ( "length" ) ) ) , %pre ( %inc , %var ( "i" ) ) , %seq 
                  ( %seq ( %vdecl ( "value" ) , %exp ( %bop ( %assign , %var (
                   "value" ) , %call ( %var ( "ToNumber" ) , %cons ( %mem ( 
                  %var ( "arguments" ) , %var ( "i" ) ) , %nil ) ) ) ) ) , %if
                   ( %call ( %var ( "isNaN" ) , %cons ( %var ( "value" ) , 
                  %nil ) ) , %return ( %var ( "NaN" ) ) , %if ( %bop ( %lt , 
                  %var ( "value" ) , %var ( "min" ) ) , %exp ( %bop ( %assign 
                  , %var ( "min" ) , %var ( "value" ) ) ) , %if ( %bop ( %and 
                  , %call ( %var ( "IsNegativeZero" ) , %cons ( %var ( "value"
                   ) , %nil ) ) , %call ( %var ( "IsPositiveZero" ) , %cons ( 
                  %var ( "min" ) , %nil ) ) ) , %exp ( %bop ( %assign , %var (
                   "min" ) , %var ( "value" ) ) ) , %emptyStmt ) ) ) ) ) ) , 
                  %return ( %var ( "min" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "value1" ) , %cons ( 
                  %var ( "value2" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 190 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 2
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %bop ( %assign , %var ( "x" ) , %call
                   ( %var ( "ToNumber" ) , %cons ( %var ( "x" ) , %nil ) ) ) )
                   , %seq ( %exp ( %bop ( %assign , %var ( "y" ) , %call ( 
                  %var ( "ToNumber" ) , %cons ( %var ( "y" ) , %nil ) ) ) ) , 
                  %return ( %call ( %var ( "MathPow" ) , %cons ( %var ( "x" ) 
                  , %cons ( %var ( "y" ) , %nil ) ) ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %cons ( %var ( 
                  "y" ) , %nil ) )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 192 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.random" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 194 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.round" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 196 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %exp ( %bop ( %assign , %var ( "x" ) , %call
                   ( %var ( "ToNumber" ) , %cons ( %var ( "x" ) , %nil ) ) ) )
                   , %if ( %call ( %var ( "isFinite" ) , %cons ( %var ( "x" ) 
                  , %nil ) ) , %return ( %call ( %var ( "MathSin" ) , %cons ( 
                  %var ( "x" ) , %nil ) ) ) , %return ( %var ( "NaN" ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 198 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.sqrt" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 200 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %throw ( %con ( "NotImplemented: Math.tan" ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "x" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 202 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %call ( %var ( "DatePrototypeToString" ) 
                  , %cons ( %con ( %this ) , %nil ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 204 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %call ( %var ( "GetInternalProperty" ) , 
                  %cons ( %con ( %this ) , %cons ( %con ( "PrimitiveValue" ) ,
                   %nil ) ) ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 206 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 1
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %return ( %con ( %null ) )
                "Extensible" |-> true
                "FormalParameters" |-> %cons ( %var ( "string" ) , %nil )
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
        <obj>
            <oid>
                @oo ( 208 )
            </oid>
            <properties>
                "length" |-> @desc ( 
                    "Configurable" |-> false
                    "Enumerable" |-> false
                    "Value" |-> 0
                    "Writable" |-> false )
            </properties>
            <internalProperties>
                "Class" |-> "Function"
                "Code" |-> %seq ( %if ( %pre ( %bang , %call ( %var ( 
                  "IsObject" ) , %cons ( %con ( %this ) , %nil ) ) ) , %throw 
                  ( %call ( %var ( "TypeError" ) , %cons ( %con ( 
                  "Error.prototype.toString" ) , %nil ) ) ) , %emptyStmt ) , 
                  %seq ( %seq ( %vdecl ( "name" ) , %exp ( %bop ( %assign , 
                  %var ( "name" ) , %cond ( %bop ( %eqs , %mem ( %con ( %this 
                  ) , %con ( "name" ) ) , %var ( "undefined" ) ) , %con ( 
                  "Error" ) , %call ( %var ( "ToString" ) , %cons ( %mem ( 
                  %con ( %this ) , %con ( "name" ) ) , %nil ) ) ) ) ) ) , %seq
                   ( %seq ( %vdecl ( "msg" ) , %exp ( %bop ( %assign , %var ( 
                  "msg" ) , %cond ( %bop ( %eqs , %mem ( %con ( %this ) , %con
                   ( "message" ) ) , %var ( "undefined" ) ) , %con ( "" ) , 
                  %call ( %var ( "ToString" ) , %cons ( %mem ( %con ( %this ) 
                  , %con ( "message" ) ) , %nil ) ) ) ) ) ) , %seq ( %if ( 
                  %bop ( %eqs , %var ( "name" ) , %con ( "" ) ) , %return ( 
                  %var ( "msg" ) ) , %emptyStmt ) , %seq ( %if ( %bop ( %eqs ,
                   %var ( "msg" ) , %con ( "" ) ) , %return ( %var ( "name" ) 
                  ) , %emptyStmt ) , %return ( %bop ( %plus , %bop ( %plus , 
                  %var ( "name" ) , %con ( ": " ) ) , %var ( "msg" ) ) ) ) ) )
                   ) )
                "Extensible" |-> true
                "FormalParameters" |-> %nil
                "Prototype" |-> @FunctionProtoOid
                "Scope" |-> @GlobalEid
                "Strict" |-> false
            </internalProperties>
        </obj>
) </objs>
syntax Oid ::= "@oo" "(" Int ")"
