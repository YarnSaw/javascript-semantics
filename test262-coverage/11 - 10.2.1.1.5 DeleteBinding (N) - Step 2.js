// 10.2.1.1.5 DeleteBinding (N), Step 2

// 2. If envRec does not have a binding for the name that is the value of N, return true.

// Infeasible. (provided that we have only the standard built-in objects, but no host object which is implementation-dependent.)
// 
// DeteleBinding is only called by "11.4.1 The delete Operator" when its argument is evaluated to a reference whose base is an environment record.
// 
// There are only three cases where a reference is generated:
// - 11.1.2 Identifier Reference
//     In this case, a reference is generated by GetIdentifierReference.
// - 11.2.1 Property Accessors
//     In this case, for a given property accessor expression, 'e.x', it first calculates value of 'e', let say 'v', and returns a reference whose base is 'v'.
// - 11.2.3 Function Calls
//     In this case, if we only consider the standard built-in objects, but not any host objects, then no reference is generated in a function call.
// 
// Now we can have the following case analysis:
// - In the first case, GetIdentifierReference returns a valid reference only if [[HasBinding]] is true, (i.e., the environment record has a binding),
//     otherwise it returns an invalid reference whose base is undefined, in which case DeleteBinding is not called.
//     Thus, if DeleteBinding is called, Step 2 cannot be satisfied.
// - In the second case, 'v' is not an environment record, because an environment record is not of type of a value,
//     thus DeleteBinding is not called at all in this case.
// - In the third case, given the pre-condition, it cannot generate a reference.
// Therefore, in any case, it cannot satisfy this step, that is, 'envRec' always has a binding for 'N'.
